// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// CppSampleBinaryMatricesInterval
std::vector<Rcpp::NumericMatrix> CppSampleBinaryMatricesInterval(const Rcpp::NumericVector& rowsumsL, const Rcpp::NumericVector& rowsumsU, const Rcpp::NumericVector& colsumsL, const Rcpp::NumericVector& colsumsU, int N, int steps, const std::string& method);
RcppExport SEXP _marathonR_CppSampleBinaryMatricesInterval(SEXP rowsumsLSEXP, SEXP rowsumsUSEXP, SEXP colsumsLSEXP, SEXP colsumsUSEXP, SEXP NSEXP, SEXP stepsSEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rowsumsL(rowsumsLSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rowsumsU(rowsumsUSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type colsumsL(colsumsLSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type colsumsU(colsumsUSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type steps(stepsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type method(methodSEXP);
    rcpp_result_gen = Rcpp::wrap(CppSampleBinaryMatricesInterval(rowsumsL, rowsumsU, colsumsL, colsumsU, N, steps, method));
    return rcpp_result_gen;
END_RCPP
}
// CppSampleBinaryMatricesFixed
std::vector<Rcpp::NumericMatrix> CppSampleBinaryMatricesFixed(const Rcpp::NumericVector& rowsums, const Rcpp::NumericVector& colsums, int N, int steps, const std::string& method);
RcppExport SEXP _marathonR_CppSampleBinaryMatricesFixed(SEXP rowsumsSEXP, SEXP colsumsSEXP, SEXP NSEXP, SEXP stepsSEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rowsums(rowsumsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type colsums(colsumsSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type steps(stepsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type method(methodSEXP);
    rcpp_result_gen = Rcpp::wrap(CppSampleBinaryMatricesFixed(rowsums, colsums, N, steps, method));
    return rcpp_result_gen;
END_RCPP
}
// CppIsRealizableInterval
bool CppIsRealizableInterval(const Rcpp::NumericVector& rowsumsL, const Rcpp::NumericVector& rowsumsU, const Rcpp::NumericVector& colsumsL, const Rcpp::NumericVector& colsumsU);
RcppExport SEXP _marathonR_CppIsRealizableInterval(SEXP rowsumsLSEXP, SEXP rowsumsUSEXP, SEXP colsumsLSEXP, SEXP colsumsUSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rowsumsL(rowsumsLSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rowsumsU(rowsumsUSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type colsumsL(colsumsLSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type colsumsU(colsumsUSEXP);
    rcpp_result_gen = Rcpp::wrap(CppIsRealizableInterval(rowsumsL, rowsumsU, colsumsL, colsumsU));
    return rcpp_result_gen;
END_RCPP
}
// CppIsRealizableFixed
bool CppIsRealizableFixed(const Rcpp::NumericVector& rowsums, const Rcpp::NumericVector& colsums);
RcppExport SEXP _marathonR_CppIsRealizableFixed(SEXP rowsumsSEXP, SEXP colsumsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rowsums(rowsumsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type colsums(colsumsSEXP);
    rcpp_result_gen = Rcpp::wrap(CppIsRealizableFixed(rowsums, colsums));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_marathonR_CppSampleBinaryMatricesInterval", (DL_FUNC) &_marathonR_CppSampleBinaryMatricesInterval, 7},
    {"_marathonR_CppSampleBinaryMatricesFixed", (DL_FUNC) &_marathonR_CppSampleBinaryMatricesFixed, 5},
    {"_marathonR_CppIsRealizableInterval", (DL_FUNC) &_marathonR_CppIsRealizableInterval, 4},
    {"_marathonR_CppIsRealizableFixed", (DL_FUNC) &_marathonR_CppIsRealizableFixed, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_marathonR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
